import scala.collection.mutable.ArrayBuffer

object SqInRect {

  def sqInRect(x: Int, y: Int): Array[Int] = {
    
  var res= ArrayBuffer[Int]() 
  
  red(x,y,res)
  
  if (res.size != 0) { res= x.min(y) +: res }
  
  res.toArray
  }
  
  def red(x : Int, y: Int, res: ArrayBuffer[Int]) :Int={
    
  var (min,max) = (x.min(y),x.max(y))
   
  if (max!=min) { res.prepend(red(min, max-min,res)) }
  
  if (max==min && res.size > 0) {res.prepend(min)} 
  
  min
  
  }
}

*****************************************************************************************************
object SqInRect {

  def sqInRect(min: Int, max: Int, squares: Array[Int] = Array()): Array[Int] = {
    val Array(width, length) = Array(min, max).sorted
    if (width == length)
      if (squares.isEmpty) Array() else (width +: squares).reverse
    else
      sqInRect(length-width, width, width +: squares)
  }
}

println(SqInRect.sqInRect(14,20).toList)

